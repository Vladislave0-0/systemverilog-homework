$date
	Wed Apr 23 21:57:31 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var parameter 32 ! N $end
$var parameter 32 " S $end
$var reg 8 # a [7:0] $end
$scope module i0 $end
$var wire 8 $ a [7:0] $end
$var wire 8 % res [7:0] $end
$upscope $end
$scope module i1 $end
$var wire 8 & a [7:0] $end
$var wire 8 ' res [7:0] $end
$upscope $end
$scope module i2 $end
$var wire 8 ( a [7:0] $end
$var reg 8 ) res [7:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 * i [31:0] $end
$upscope $end
$upscope $end
$scope module i3 $end
$var wire 8 + a [7:0] $end
$var wire 8 , res [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 - i $end
$scope begin zero_bit_gen $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 . i $end
$scope begin zero_bit_gen $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 / i $end
$scope begin zero_bit_gen $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 0 i $end
$scope begin shifted_bit_gen $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 1 i $end
$scope begin shifted_bit_gen $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 2 i $end
$scope begin shifted_bit_gen $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 3 i $end
$scope begin shifted_bit_gen $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 4 i $end
$scope begin shifted_bit_gen $end
$upscope $end
$upscope $end
$upscope $end
$scope module i4 $end
$var wire 8 5 a [7:0] $end
$var wire 8 6 res [7:0] $end
$var parameter 32 7 N $end
$var parameter 32 8 S $end
$upscope $end
$scope module i5 $end
$var wire 8 9 a [7:0] $end
$var wire 8 : res [7:0] $end
$var parameter 32 ; N $end
$var parameter 32 < S $end
$upscope $end
$scope module i6 $end
$var wire 8 = a [7:0] $end
$var parameter 32 > N $end
$var parameter 32 ? S $end
$var reg 8 @ res [7:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 A i [31:0] $end
$upscope $end
$upscope $end
$scope module i7 $end
$var wire 8 B a [7:0] $end
$var wire 8 C res [7:0] $end
$var parameter 32 D N $end
$var parameter 32 E S $end
$scope begin genblk1[0] $end
$var parameter 2 F i $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 G i $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 H i $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 I i $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 J i $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 K i $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 L i $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 M i $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 N i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 O i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 M
b110 L
b101 K
b100 J
b11 I
b10 H
b1 G
b0 F
b11 E
b1000 D
b11 ?
b1000 >
b11 <
b1000 ;
b11 8
b1000 7
b111 4
b110 3
b101 2
b100 1
b11 0
b10 /
b1 .
b0 -
b11 "
b1000 !
$end
#0
$dumpvars
b0 O
b0 N
b100 C
b100100 B
b1000 A
b100 @
b100100 =
b100 :
b100100 9
b100 6
b100100 5
b100000 ,
b100100 +
b1000 *
b100000 )
b100100 (
b100000 '
b100100 &
b100000 %
b100100 $
b100100 #
$end
#1
b1000 %
b1000 '
b1000 )
b1000 *
b10000 @
b1000 A
b1000 ,
b10000 6
b10000 :
b10000 C
b10000001 #
b10000001 $
b10000001 &
b10000001 (
b10000001 +
b10000001 5
b10000001 9
b10000001 =
b10000001 B
b1000 O
b1000 N
#2
b1001000 %
b1001000 '
b1001000 )
b1000 *
b1 @
b1000 A
b1001000 ,
b1 6
b1 :
b1 C
b1001 #
b1001 $
b1001 &
b1001 (
b1001 +
b1001 5
b1001 9
b1001 =
b1001 B
b1000 O
b1000 N
#3
b11000 %
b11000 '
b11000 )
b1000 *
b1100 @
b1000 A
b11000 ,
b1100 6
b1100 :
b1100 C
b1100011 #
b1100011 $
b1100011 &
b1100011 (
b1100011 +
b1100011 5
b1100011 9
b1100011 =
b1100011 B
b1000 O
b1000 N
#4
b1101000 %
b1101000 '
b1101000 )
b1000 *
b1 @
b1000 A
b1101000 ,
b1 6
b1 :
b1 C
b1101 #
b1101 $
b1101 &
b1101 (
b1101 +
b1101 5
b1101 9
b1101 =
b1101 B
b1000 O
b1000 N
#5
b1000 *
b10001 @
b1000 A
b10001 6
b10001 :
b10001 C
b10001101 #
b10001101 $
b10001101 &
b10001101 (
b10001101 +
b10001101 5
b10001101 9
b10001101 =
b10001101 B
b1000 O
b1000 N
#6
b101000 %
b101000 '
b101000 )
b1000 *
b1100 @
b1000 A
b101000 ,
b1100 6
b1100 :
b1100 C
b1100101 #
b1100101 $
b1100101 &
b1100101 (
b1100101 +
b1100101 5
b1100101 9
b1100101 =
b1100101 B
b1000 O
b1000 N
#7
b10010000 %
b10010000 '
b10010000 )
b1000 *
b10 @
b1000 A
b10010000 ,
b10 6
b10 :
b10 C
b10010 #
b10010 $
b10010 &
b10010 (
b10010 +
b10010 5
b10010 9
b10010 =
b10010 B
b1000 O
b1000 N
#8
b1000 %
b1000 '
b1000 )
b1000 *
b0 @
b1000 A
b1000 ,
b0 6
b0 :
b0 C
b1 #
b1 $
b1 &
b1 (
b1 +
b1 5
b1 9
b1 =
b1 B
b1000 O
b1000 N
#9
b1101000 %
b1101000 '
b1101000 )
b1000 *
b1 @
b1000 A
b1101000 ,
b1 6
b1 :
b1 C
b1101 #
b1101 $
b1101 &
b1101 (
b1101 +
b1101 5
b1101 9
b1101 =
b1101 B
b1000 O
b1000 N
#10
b10110000 %
b10110000 '
b10110000 )
b1000 *
b1110 @
b1000 A
b10110000 ,
b1110 6
b1110 :
b1110 C
b1110110 #
b1110110 $
b1110110 &
b1110110 (
b1110110 +
b1110110 5
b1110110 9
b1110110 =
b1110110 B
b1000 O
b1000 N
#11
b11101000 %
b11101000 '
b11101000 )
b1000 *
b111 @
b1000 A
b11101000 ,
b111 6
b111 :
b111 C
b111101 #
b111101 $
b111101 &
b111101 (
b111101 +
b111101 5
b111101 9
b111101 =
b111101 B
b1000 O
b1000 N
#12
b1101000 %
b1101000 '
b1101000 )
b1000 *
b11101 @
b1000 A
b1101000 ,
b11101 6
b11101 :
b11101 C
b11101101 #
b11101101 $
b11101101 &
b11101101 (
b11101101 +
b11101101 5
b11101101 9
b11101101 =
b11101101 B
b1000 O
b1000 N
#13
b1100000 %
b1100000 '
b1100000 )
b1000 *
b10001 @
b1000 A
b1100000 ,
b10001 6
b10001 :
b10001 C
b10001100 #
b10001100 $
b10001100 &
b10001100 (
b10001100 +
b10001100 5
b10001100 9
b10001100 =
b10001100 B
b1000 O
b1000 N
#14
b11001000 %
b11001000 '
b11001000 )
b1000 *
b11111 @
b1000 A
b11001000 ,
b11111 6
b11111 :
b11111 C
b11111001 #
b11111001 $
b11111001 &
b11111001 (
b11111001 +
b11111001 5
b11111001 9
b11111001 =
b11111001 B
b1000 O
b1000 N
#15
b110000 %
b110000 '
b110000 )
b1000 *
b11000 @
b1000 A
b110000 ,
b11000 6
b11000 :
b11000 C
b11000110 #
b11000110 $
b11000110 &
b11000110 (
b11000110 +
b11000110 5
b11000110 9
b11000110 =
b11000110 B
b1000 O
b1000 N
#16
b101000 %
b101000 '
b101000 )
b1000 *
b1000 A
b101000 ,
b11000101 #
b11000101 $
b11000101 &
b11000101 (
b11000101 +
b11000101 5
b11000101 9
b11000101 =
b11000101 B
b1000 O
b1000 N
#17
b1010000 %
b1010000 '
b1010000 )
b1000 *
b10101 @
b1000 A
b1010000 ,
b10101 6
b10101 :
b10101 C
b10101010 #
b10101010 $
b10101010 &
b10101010 (
b10101010 +
b10101010 5
b10101010 9
b10101010 =
b10101010 B
b1000 O
b1000 N
#18
b101000 %
b101000 '
b101000 )
b1000 *
b11100 @
b1000 A
b101000 ,
b11100 6
b11100 :
b11100 C
b11100101 #
b11100101 $
b11100101 &
b11100101 (
b11100101 +
b11100101 5
b11100101 9
b11100101 =
b11100101 B
b1000 O
b1000 N
#19
b10111000 %
b10111000 '
b10111000 )
b1000 *
b1110 @
b1000 A
b10111000 ,
b1110 6
b1110 :
b1110 C
b1110111 #
b1110111 $
b1110111 &
b1110111 (
b1110111 +
b1110111 5
b1110111 9
b1110111 =
b1110111 B
b1000 O
b1000 N
#20
b1000 O
b1000 N
